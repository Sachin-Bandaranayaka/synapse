generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                        String            @id @default(cuid())
  name                      String            @unique
  isActive                  Boolean           @default(true)
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  businessName              String?
  logoUrl                   String?
  backgroundColor           String?
  cardColor                 String?
  fontColor                 String?
  fardaExpressClientId      String?
  fardaExpressApiKey        String?
  transExpressApiKey        String?
  royalExpressApiKey        String?
  businessAddress           String?
  businessPhone             String?
  invoicePrefix             String?
  defaultShippingProvider   ShippingProvider? @default(FARDA_EXPRESS)
  metaPixelId               String?
  metaAccessToken           String?
  metaConversionsApiEnabled Boolean           @default(false)
  referredById              String?
  leads                     Lead[]
  orders                    Order[]
  products                  Product[]
  stockAdjustments          StockAdjustment[]
  referredBy                Tenant?           @relation("TenantReferrals", fields: [referredById], references: [id])
  referrals                 Tenant[]          @relation("TenantReferrals")
  trackingUpdates           TrackingUpdate[]
  users                     User[]
  leadBatches               LeadBatch[]
  costConfig                TenantCostConfig?
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String?
  password         String
  role             Role              @default(TEAM_MEMBER)
  permissions      String[]
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tenantId         String
  leads            Lead[]
  orders           Order[]
  stockAdjustments StockAdjustment[]
  tenant           Tenant            @relation(fields: [tenantId], references: [id])
  leadBatches      LeadBatch[]

  @@index([email])
  @@index([tenantId])
}

model Product {
  id               String            @id @default(uuid())
  code             String
  name             String
  description      String?
  price            Float
  costPrice        Float             @default(0)
  stock            Int               @default(0)
  lowStockAlert    Int               @default(10)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tenantId         String
  leads            Lead[]
  orders           Order[]
  tenant           Tenant            @relation(fields: [tenantId], references: [id])
  stockAdjustments StockAdjustment[]

  @@unique([code, tenantId])
  @@index([tenantId])
}

model Lead {
  id          String     @id @default(uuid())
  csvData     Json
  productCode String
  status      LeadStatus @default(PENDING)
  userId      String?
  batchId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tenantId    String
  product     Product    @relation(fields: [productCode, tenantId], references: [code, tenantId])
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  assignedTo  User?      @relation(fields: [userId], references: [id])
  batch       LeadBatch? @relation(fields: [batchId], references: [id])
  order       Order?

  @@index([productCode])
  @@index([userId])
  @@index([batchId])
  @@index([tenantId])
}

model Order {
  id                  String            @id
  number              Int               @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  status              OrderStatus       @default(PENDING)
  quantity            Int               @default(1)
  total               Float             @default(0)
  discount            Float             @default(0)
  customerName        String
  customerPhone       String
  customerSecondPhone String?
  customerAddress     String
  customerCity        String            @default("")
  customerEmail       String?
  notes               String?
  shippingProvider    ShippingProvider?
  trackingNumber      String?
  shippedAt           DateTime?
  deliveredAt         DateTime?
  productId           String
  leadId              String            @unique
  userId              String
  invoicePrinted      Boolean           @default(false)
  tenantId            String
  lead                Lead              @relation(fields: [leadId], references: [id])
  product             Product           @relation(fields: [productId], references: [id])
  tenant              Tenant            @relation(fields: [tenantId], references: [id])
  assignedTo          User              @relation(fields: [userId], references: [id])
  trackingUpdates     TrackingUpdate[]
  costs               OrderCosts?

  @@index([productId])
  @@index([leadId])
  @@index([userId])
  @@index([status])
  @@index([tenantId])
}

model StockAdjustment {
  id            String   @id @default(uuid())
  productId     String
  quantity      Int
  reason        String
  previousStock Int
  newStock      Int
  userId        String
  createdAt     DateTime @default(now())
  tenantId      String
  product       Product  @relation(fields: [productId], references: [id])
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  adjustedBy    User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([tenantId])
}

model TrackingUpdate {
  id          String   @id @default(uuid())
  orderId     String
  status      String
  location    String?
  description String?
  timestamp   DateTime
  createdAt   DateTime @default(now())
  tenantId    String
  order       Order    @relation(fields: [orderId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([orderId])
  @@index([timestamp])
  @@index([tenantId])
}

model LeadBatch {
  id          String   @id @default(uuid())
  totalCost   Float    @default(0)
  leadCount   Int      @default(0)
  costPerLead Float    @default(0)
  importedAt  DateTime @default(now())
  tenantId    String
  userId      String
  leads       Lead[]
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  importedBy  User     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([importedAt])
}

model OrderCosts {
  id             String  @id @default(uuid())
  orderId        String  @unique
  productCost    Float   @default(0)
  leadCost       Float   @default(0)
  packagingCost  Float   @default(0)
  printingCost   Float   @default(0)
  returnCost     Float   @default(0)
  totalCosts     Float   @default(0)
  grossProfit    Float   @default(0)
  netProfit      Float   @default(0)
  profitMargin   Float   @default(0)
  order          Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model TenantCostConfig {
  id                    String  @id @default(uuid())
  tenantId              String  @unique
  defaultPackagingCost  Float   @default(0)
  defaultPrintingCost   Float   @default(0)
  defaultReturnCost     Float   @default(0)
  tenant                Tenant  @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TEAM_MEMBER
}

enum LeadStatus {
  PENDING
  CONFIRMED
  NO_ANSWER
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}

enum ShippingProvider {
  FARDA_EXPRESS
  TRANS_EXPRESS
  SL_POST
  ROYAL_EXPRESS
}
